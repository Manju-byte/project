#include <LiquidCrystal.h> 
LiquidCrystal lcd(12,11,5,4,3,2); 
void setup() 
{ 
lcd.begin(16,2); 
lcd.setCursor(4,0); 
lcd.print("Reporting"); 
lcd.setCursor(7,1); 
lcd.print("System"); 
delay(2000); 
}
void loop() 
{ 
lcd.clear(); 
float Voltage=analogRead(A0)*0.004882814; 
float degrees = ( Voltage-0.5)*100; 
lcd.setCursor(3,0); 
lcd.print("Temp:"); 
lcd.setCursor(8,0); 
lcd.print(degrees); 
if(degrees<10) 
{ 
lcd.setCursor(4,1); 
lcd.print("-TOO COLD"); 
} 
else if(degrees<18 && degrees>10) 
{ 
lcd.setCursor(4,1); 
lcd.print("-COLD"); 
}
else if(degrees<30 && degrees>18) 
{ 
lcd.setCursor(4,1); 
lcd.print("-Normal Temp"); 
}
else if(degrees<45 && degrees>30) 
{ 
lcd.setCursor(4,1); 
lcd.print("-HOT"); 
} 
else if(degrees>45) 
{ 
lcd.setCursor(4,1); 
lcd.print("-TOO HOT"); 
} 
delay(2000); 
lcd.clear(); 
int ldr = analogRead(A1); 
lcd.setCursor(1,0); 
lcd.print("Intensity:"); 
lcd.setCursor(12,0); 
lcd.print(ldr); 
if(ldr<230) 
{ 
lcd.setCursor(4,1); 
lcd.print("-TOO BRIGHT"); 
} 
else if(ldr<460 && ldr>230) 
{
lcd.setCursor(2,1); 
lcd.print("-Medium Light"); 
}
else if(ldr>460) 
{ 
lcd.setCursor(4,1); 
lcd.print("-TOO DARK"); 
} 
delay(2000); 
lcd.clear(); 
}
Python:
import serial
import time
# Initialize the serial port to communicate with Arduino
# Make sure to replace 'COM3' with your actual port (for Windows) or '/dev/ttyUSB0' (for 
Linux/Raspberry Pi)
arduino = serial.Serial('COM3', 9600, timeout=1)
time.sleep(2) # Wait for the Arduino to initialize
def read_data():
 while True:
 # Read a line from the Arduino
 data = arduino.readline().decode('utf-8').strip()
 # If the line is not empty
 if data:
 # Print the received data to the terminal
 print(f"Received Data: {data}")
 # Parse the temperature and light level from the received data
 if "Temperature:" in data and "Light Level:" in data:
 try:
 temperature = float(data.split("Temperature:")[1].split(",")[0].strip())
 light_level = int(data.split("Light Level:")[1].strip())
 print(f"Temperature: {temperature:.2f} °C")
 print(f"Light Level: {light_level} %")
 except ValueError as e:
 print("Error parsing data:", e)
 time.sleep(1) # Wait a bit before reading the next data
if _name_ == '_main_':
 try:
 read_data()
 except KeyboardInterrupt:
 print("\nProgram terminated.")
 arduino.close()
 